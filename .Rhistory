difftime(Sys.time(), t1, units = 'days')
library(swirl)
swirl()
bye()
install_from_swirl("Data Analysis")
install_from_swirl("Statistical Inference")
library(swirl)
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
play()
play_matrix <- 1:20
dim(play_matrix) <- c(4,5)
play_matrix[, 1] <- c(0, 0, 0, 0)
play_matrix
nxt()
attributes(my_vector)
play()
rm(play_matrix)
nxt()
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
View(my_vector)
library(swirl)
Ben
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(cars$speed, cars$dist)
plot(cars$dist, cars$speed)
plot(cars$speed, cars$dist)
plot(cars$speed, cars$dist, xlab = "Speed")
plot(cars$speed, cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars$speed, cars$dist, ylab = "Stopping Distance")
plot(cars$speed, cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
?par
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
?points
plot(cars, pch = 2)
bye()
swirl()
data(mtcars)
play()
head(mtcars)
?mtcars
summary(mtcars)
dim(mtcars)
nxt()
?boxplot
boxplot(formula = mpg ~ cyl, data = matcars)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
cars
cars$mpgCity
myMPG <- cars$mpgCity
mean(myMPG)
median(myMPG)
table(myMPG)
19
range(cars$price)
61.9 - 7.4
var(cars$price)
sd(cars$prie)
sd(cars$price)
20
10
25
4
summary(cars$price)
library(swirl)
swirl()
1-(3/36)
deck
52
1/13
0
3/13
2/52
2/51
0.64
0.64
mypdf(x)
mypdf
integrate(mypdf,0,1.6)
sqrt(8)
sqrt(2)
0.997*0.001
(1-0.997)*0.999
(0.015)*0.999
0.000997/(0.000997 + 0.014985)
install.package("ggplot2")
install.packages("ggplot2")
library(ggplot2)
install_from_swirl("Regression Models")
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
?read.csv
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN" | country == "US")
filter(cran, country == "IN" | country == "US")
play()
c(1,2,3) == c(1,2,3) | c(2,3,4) == c(2,3,4)
c(1,2,3) == c(1,2,3) || c(2,3,4) == c(2,3,4)
c(1,2,4) == c(1,2,3) || c(2,3,5) == c(2,3,4)
c(1,2,4) == c(1,2,3) | c(2,3,5) == c(2,3,4)
nxt()
play()
c(1,2,4) == c(1,2,3) || c(2,3,5) == c(NA,NA,4)
c(1,2,4) == c(NA,NA,3) || c(2,3,5) == c(NA,NA,4)
c(1,2,4) == c(2,2,3,5) || c(2,3,5) == c(NA,NA,4)
c(1,2,4) == c(2,2,3) || c(2,3,5) == c(NA,NA,4)
c(1,2,4) == c(2,2,3) || c(2,3,5) == c(2,NA,4)
c(1,2,4) == c(2,2,3) || c(2,3,5) == c(3,NA,4)
c(1,2,4) == c(2,2,3) | c(2,3,5) == c(3,NA,4)
nxt()
filter(cran, size > 100500, r_os == "linuz-gnu")
filter(cran, size > 100500 & r_os == "linuz-gnu")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500 , r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
View(cran2)
View(cran)
filter(cran, !is.na(X:ip_id))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
View(cran)
crannew <- mutate(cran, rarchlast = r_arch[-2:-1])
filter(cran, country == "CN")
class(cran)
library(swirl)
swirl()
library(dplyr)
tbl_df(cran)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
?n
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count>679)
top_counts <- filter(pack_sum, count>679)
top_counts
View(top_counts)
arrange(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
?chain
submit()
View(result3)
select(ip_id, country, package, size) %>%
0
cran %>%
select(ip_id, country, package, size) %>%
print
submit()
submit()
?mutate
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
print
submit()
submit()
submit()
submit()
library(tidyr)
bye()
swirl()
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, value, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?seperate
?separate
separate(res, sex_class, into = c("sex", "class"))
submit()
students3
?gather
submit
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
students4
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "passed")
failed <- mutate(failed, status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
?contains
?select
?separate
submit()
?group_by
submit()
submit()
?matrix()
matrix(nrow = 4, ncol = 4)
?dataframe
?data.frame
hadleypaper <- matrix(nrow = 4, ncol = 4)
names(hadleypaper) <- c("row", "a", "b", "c")
hadleypaper
hadleypaper <- data.frame(hadleypaper)
names(hadleypaper) <- c("row", "a", "b", "c")
hadleypaper
?rows
?row
?rbind
hadleypaper[-4]
hadleypaper[1:3]
?index
hadleypaper[1:3,]
hadleypaper <- hadleypaper[1:3,]; hadleypaper
hadleypaper$row <- c("A","B", "C")
hadleypaper
hadleypaper$a <- c(1,2,3)
hadleypaper$b <- c(4,5,6)
hadleypaper$c <- c(7,8,9)
hadleypaper
?gather
gather(hadleypaper, column, value, -row)
gather(hadleypaper, column, value, )
hadleyalt <- gather(hadleypaper, column, value, -row)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
play()
rm(hadleyalt)
rm(hadleypaper)
nxt()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = true)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_m
this_moment
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
now("America/New_York")
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive = depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tz = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
new_interbal(last_time, arrive)
new_interval(last_time, arrive)
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(swirl)
swirl()
bye()
swirl()
plot(child ~ parent, galton)
?plot
?jitter
plot(jitter(child,4) ~ parent, galton)
?formula
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd = 3, col = 'red')
summary(regrline)
fit <- lm(child ~ parent, galton)
summary(fit)
sum(fit$residuals)
mean(fit$residuals)
?cov
cov(fit$residuals, galton$parent)
ols.ic <- fit$coefficients[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
source('/Library/Frameworks/R.framework/Versions/3.1/Resources/library/swirl/Courses/Regression_Models/Residuals/res_eqn.R')
lhs - rhs
all.equal(lhs, rhs)
?all.equal
View(galton)
var(galton$child)
varChild <- var(galton$child)
varRes <- fit$residuals
varRes <- var(fit$residuals)
?est
varEst <- est(ols.slope, ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, sum(varEst, varRes))
all.equal(varChild, varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
?lm
play()
summarize(efit)
sumarize(efit)
?summarize
summary(efit)
nxt()
mean(efit$residuals)
cov(attenu$mag, efit$residuals)
cov(attenu$dist, efit$residuals)
info()
main()
cor(gpa_nor, gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
library(swirl)
swirl
swirl()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
View(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2_, coef))
lapply(list(fit, fit2), coef))
lapply(list(fit, fit2), coef)
swirl()
View(swiss)
all <- lm(Fertility ~ ., swiss)
summary(all)
lm(Fertiility ~ Agriculture, swiss)
lm(Fertility ~ Agriculture, swiss)
Summary(lm(Fertility ~ Agriculture, swiss))
summary(lm(Fertility ~ Agriculture, swiss))
cor(Examination, Education, swiss)
cor(Examination ~ Education, swiss)
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
play()
source('~/.active-rstudio-document')
butts("Tom Brady")
buttz("Tom Brady")
source('~/.active-rstudio-document')
buttz("Tom Brady")
source('~/.active-rstudio-document')
buttz("Tom Brady")
source('~/.active-rstudio-document')
buttz("Tom Brady")
nxt()
makelms()
ec <- swiss$Examination + swiss$Catholic
efit(Fertility ~ . + ec, swiss)
efit <- lm(Fertility ~ . + ec, swiss)
all - efit
all$coef - efit$coef
all$coefficients - efit$coefficients
?csv
??csv
?setwd
getwd
setwd(~/GitHub/Whatlanguage)
setwd(~GitHub/Whatlanguage)
setwd("~/GitHub/Whatlanguage")
getwd()
source('~/.active-rstudio-document')
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
?dplyr
browseVignettes(package = 'dplyr')
View(twograms)
twograms <- tbl(twograms)
library("swirl")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
bye()
detach("package:swirl", unload=TRUE)
twograms <- tbl_df(twograms)
rm(mydf)
rm(cran)
rm(cran2, cran3)
select(twograms, X2.gram, X...)
twograms <- select(twograms, X2.gram, X...)
summarise(twograms, total = sum(X...))
rmtwograms
rm(twograms)
rm(path2csv)
source('~/.active-rstudio-document')
rm(twograms)
source('~/.active-rstudio-document')
rm(twograms)
source('~/.active-rstudio-document')
View(twograms)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
ggplot(data = twograms, aes(x = X2.gram, y = frequency))
h <- ggplot(data = twograms, aes(x = X2.gram, y = frequency))
h <- ggplot(twograms, aes(x = X2.gram))
h + geom_ribbon(aes(ymin = 0, ymax = frequency))
h+ geom_ribbon(aes(ymin = 0, ymax = frequency * 100))
h + geom_ribbon(aes(y = X...))
h + geom_ribbon(aes(ymin = X... - 1000000, ymax = X...))
> h + geom_ribbon(aes(ymin = X... - .1*X..., ymax = X...))
h + geom_ribbon(aes(ymin = X... - .1*X..., ymax = X...))
?write.table
write.csv(twograms, "2gram_frequency.csv")
